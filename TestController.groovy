package airasia

import java.lang.Exception;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.Connection;

class TestController {
	
	def soalNoSatu = { 
		int[] stockPrices = [70, 74, 90, 91, 66, 95, 76, 100, 71, 62, 83, 87, 86, 67, 69, 90, 80, 69, 92, 100, 85, 60, 63, 96, 84, 88, 96, 62, 78, 60, 100, 89, 85, 66, 98, 66, 80, 66, 83, 75, 63, 85, 76, 99, 95, 71, 95, 72, 92, 72, 84, 91, 91, 98, 97, 63, 95, 81, 78, 66, 80, 83, 91, 94, 87, 86, 83, 74, 95, 88, 69, 92, 100, 95, 93, 74, 93, 99, 86, 98, 96, 96, 73, 78, 71, 64, 86, 74, 81, 89, 96, 72, 94, 91, 84, 100, 100, 67, 78, 60, 60, 62, 87, 65, 62, 68, 100, 97, 78, 63, 97, 61, 77, 79, 78, 97, 66, 74, 67, 68, 83, 61, 95, 89, 90, 97, 70, 61, 62, 66, 87, 91, 70, 93, 87, 66, 69, 98, 78, 62, 86, 94, 85, 62, 97, 67, 66, 76, 69, 61, 84, 98, 69, 67, 89, 97, 99, 87, 74, 98, 66, 78, 86, 73, 82, 96, 76, 67, 61, 94, 67, 80, 64, 99, 97, 84, 69, 91, 95, 65, 86, 75, 76, 60, 73, 86, 64, 88, 94, 66, 83, 97, 60, 91, 95, 93, 86, 68, 98, 92, 96, 99, 95, 86, 78, 92, 100, 95, 100, 73, 66, 66, 74, 85, 96, 92, 85, 98, 87, 73, 62, 78, 70, 85, 72, 73, 97, 83, 65, 63, 64, 77, 84, 63, 73, 76, 73, 67, 94, 66, 89, 96, 75, 74, 99, 86, 100, 96, 92, 86, 100, 72, 81, 82, 73, 96, 90, 68, 76, 76, 81, 87, 62, 62, 72, 76, 71, 84, 87, 89, 76, 94, 67, 64, 76, 69, 62, 68, 69, 69, 68, 65, 75, 63, 81, 100, 86, 73, 69, 69, 91, 91, 98, 78, 96, 70, 78, 67, 83, 98, 90, 66, 69, 67, 85, 83, 96, 72, 95, 71, 88, 88, 74, 80, 94, 79, 95, 94, 80, 96, 73, 77, 64, 65, 99, 90, 80, 80, 91, 80, 65, 93, 70, 81, 79, 81, 89, 68, 80, 91, 86, 78, 76, 88, 99, 84, 92, 77, 95, 81, 99, 93, 81, 87, 64, 88, 90, 76, 60, 92, 99, 66, 94, 85, 88, 98, 62, 89, 87, 77, 72, 70, 77, 74, 82, 98, 77, 61, 95, 92, 88, 72, 98, 84, 65, 96, 60, 91, 94, 84, 100, 70, 72, 61, 68, 97, 97, 73, 99, 80, 90, 75, 60, 97, 89, 74, 81, 92, 84, 84, 89, 90, 100, 73, 87, 64, 92, 60, 83, 62, 66, 100, 75, 77, 60, 72, 82, 99, 83, 66, 97, 68, 86, 70, 73, 84, 77, 84, 81, 96, 95, 64, 92, 63, 86, 86, 79, 89, 99, 90, 80, 61, 63, 92, 70, 100, 73, 76, 100, 78, 69, 87, 95, 86, 92, 76, 64, 76, 82, 73, 87, 97, 97, 86, 65, 78, 77, 82, 80, 85, 93, 83, 61, 92, 87, 97, 62, 60, 69, 99, 62, 80, 74, 88, 62, 97, 60, 95, 61, 96, 72, 100, 85, 84, 64, 85, 60, 97, 98, 73, 94, 76, 90, 66, 95, 94, 71, 77, 64, 88, 85, 71, 80, 66, 99, 89, 77, 70, 90, 90, 97, 100, 64, 94, 82, 81, 84, 71, 66, 80, 95, 62, 100, 75, 82, 63, 82, 74, 84, 87, 66, 99, 95, 84, 75, 97, 79, 94, 92, 65, 93, 87, 88, 60, 84, 69, 61, 79, 67, 66, 68, 75, 60, 86, 91, 75, 96, 88, 74, 77, 100, 95, 77, 66, 82, 87, 91, 68, 89, 61, 77, 84, 88, 64, 94, 81, 76, 98, 60, 92, 88, 60, 80, 78, 68, 75, 61, 70, 67, 78, 100, 76, 64, 82, 99, 66, 100, 69, 60, 67, 67, 70, 68, 98, 80, 62, 95, 83, 79, 93, 82, 84, 90, 87, 68, 84, 76, 64, 75, 88, 74, 99, 72, 81, 76, 66, 75, 69, 85, 77, 89, 65, 66, 89, 71, 71, 98, 100, 62, 88, 77, 82, 70, 76, 86, 68, 84, 80, 73, 87, 69, 68, 99, 76, 88, 64, 63, 93, 83, 81, 69, 87, 90, 83, 79, 86, 83, 97, 69, 69, 73, 79, 77, 82, 77, 91, 90, 70, 76, 78, 74, 76, 88, 65, 76, 69, 72, 98, 73, 80, 60, 77, 71, 92, 60, 85, 79, 82, 78, 92, 89, 62, 86, 84, 95, 64, 82, 91, 86, 82, 84, 75, 87, 60, 64, 75, 69, 71, 77, 77, 92, 62, 62, 82, 76, 76, 84, 81, 74, 80, 89, 82, 88, 85, 75, 86, 71, 68, 97, 63, 86, 98, 81, 68, 85, 82, 72, 61, 100, 82, 78, 72, 75, 82, 85, 78, 92, 60, 90, 85, 85, 67, 71, 75, 78, 97, 77, 74, 84, 63, 71, 87, 61, 89, 96, 80, 82, 61, 74, 69, 64, 96, 79, 82, 84, 69, 73, 75, 94, 66, 77, 100, 73, 99, 77, 75, 62, 87, 66, 68, 64, 71, 87, 70, 94, 87, 87, 99, 78, 92, 77, 92, 96, 93, 83, 72, 77, 92, 68, 66, 89, 90, 77, 87, 75, 94, 64, 63, 75, 60, 76, 89, 75, 93, 83, 69, 66, 99, 60, 82, 82, 95, 71, 68, 91, 75, 63, 62, 76, 99, 93, 66, 64, 99, 82, 87, 87, 68, 71, 96, 64, 64, 85, 97, 90, 77, 64, 83, 80, 86, 68, 86, 98, 90, 74, 64, 79, 81, 67, 73, 100, 82, 88, 89, 87, 66, 77, 62, 80, 84, 99, 63, 91, 83, 87, 94, 91, 65, 77, 99, 97, 81, 70, 62, 98, 60, 74, 67, 83, 94, 88, 87, 97, 77, 95, 72, 91, 89, 93, 91, 75, 93, 65, 85, 96, 61, 80, 79, 62, 94, 96, 85, 95, 62, 80, 85, 61, 74, 80, 73, 95, 89, 75, 73, 84, 81, 76, 93, 89, 79, 96, 82, 94, 91, 98, 70, 79, 65, 86, 88, 61, 69, 86, 67, 65, 81, 91, 87, 76, 65, 89, 66, 98, 61, 79, 73, 100, 70, 91, 96]
		
		int[] stockPricesBuffer = stockPrices.clone()
		int rendah = 0, tinggi = 0, i = 0, ii = 0, iii = 0
		
		java.util.Arrays.sort(stockPrices)
		
		rendah = stockPrices[0]
		tinggi = stockPrices[stockPrices.length-1]
		
		render "rendah : "+rendah+" & tinggi : "+tinggi+"<br/>"
		render "<br/><br/>["
		stockPricesBuffer.find{
			if(it == rendah) {
				render it+" terendah pada index ke : "+i+" & "
				return true
			}
			i++;
			return false
		}
		
		stockPricesBuffer.find{
			if(it == tinggi && ii > i) {
				render it+" tertinggi pada index ke : "+ii
				return true
			}
			ii++;
			return false
		}
		println i+" & "+ii
		render "<br /><br />["
		stockPricesBuffer.each{
			if(iii == i || iii == ii){
				render "<span style='background-color: green;'>"+it+"</span>,"
			}
			else render it+", "
			iii++
		}
		render "]"
	}
	
	
	def bubbleSort = {
		int[] stockPrices = [70, 74, 90, 91, 66, 95, 76, 100, 71, 62, 83, 87, 86, 67, 69, 90, 80, 69, 92, 100, 85, 60, 63, 96, 84, 88, 96, 62, 78, 60, 100, 89, 85, 66, 98, 66, 80, 66, 83, 75, 63, 85, 76, 99, 95, 71, 95, 72, 92, 72, 84, 91, 91, 98, 97, 63, 95, 81, 78, 66, 80, 83, 91, 94, 87, 86, 83, 74, 95, 88, 69, 92, 100, 95, 93, 74, 93, 99, 86, 98, 96, 96, 73, 78, 71, 64, 86, 74, 81, 89, 96, 72, 94, 91, 84, 100, 100, 67, 78, 60, 60, 62, 87, 65, 62, 68, 100, 97, 78, 63, 97, 61, 77, 79, 78, 97, 66, 74, 67, 68, 83, 61, 95, 89, 90, 97, 70, 61, 62, 66, 87, 91, 70, 93, 87, 66, 69, 98, 78, 62, 86, 94, 85, 62, 97, 67, 66, 76, 69, 61, 84, 98, 69, 67, 89, 97, 99, 87, 74, 98, 66, 78, 86, 73, 82, 96, 76, 67, 61, 94, 67, 80, 64, 99, 97, 84, 69, 91, 95, 65, 86, 75, 76, 60, 73, 86, 64, 88, 94, 66, 83, 97, 60, 91, 95, 93, 86, 68, 98, 92, 96, 99, 95, 86, 78, 92, 100, 95, 100, 73, 66, 66, 74, 85, 96, 92, 85, 98, 87, 73, 62, 78, 70, 85, 72, 73, 97, 83, 65, 63, 64, 77, 84, 63, 73, 76, 73, 67, 94, 66, 89, 96, 75, 74, 99, 86, 100, 96, 92, 86, 100, 72, 81, 82, 73, 96, 90, 68, 76, 76, 81, 87, 62, 62, 72, 76, 71, 84, 87, 89, 76, 94, 67, 64, 76, 69, 62, 68, 69, 69, 68, 65, 75, 63, 81, 100, 86, 73, 69, 69, 91, 91, 98, 78, 96, 70, 78, 67, 83, 98, 90, 66, 69, 67, 85, 83, 96, 72, 95, 71, 88, 88, 74, 80, 94, 79, 95, 94, 80, 96, 73, 77, 64, 65, 99, 90, 80, 80, 91, 80, 65, 93, 70, 81, 79, 81, 89, 68, 80, 91, 86, 78, 76, 88, 99, 84, 92, 77, 95, 81, 99, 93, 81, 87, 64, 88, 90, 76, 60, 92, 99, 66, 94, 85, 88, 98, 62, 89, 87, 77, 72, 70, 77, 74, 82, 98, 77, 61, 95, 92, 88, 72, 98, 84, 65, 96, 60, 91, 94, 84, 100, 70, 72, 61, 68, 97, 97, 73, 99, 80, 90, 75, 60, 97, 89, 74, 81, 92, 84, 84, 89, 90, 100, 73, 87, 64, 92, 60, 83, 62, 66, 100, 75, 77, 60, 72, 82, 99, 83, 66, 97, 68, 86, 70, 73, 84, 77, 84, 81, 96, 95, 64, 92, 63, 86, 86, 79, 89, 99, 90, 80, 61, 63, 92, 70, 100, 73, 76, 100, 78, 69, 87, 95, 86, 92, 76, 64, 76, 82, 73, 87, 97, 97, 86, 65, 78, 77, 82, 80, 85, 93, 83, 61, 92, 87, 97, 62, 60, 69, 99, 62, 80, 74, 88, 62, 97, 60, 95, 61, 96, 72, 100, 85, 84, 64, 85, 60, 97, 98, 73, 94, 76, 90, 66, 95, 94, 71, 77, 64, 88, 85, 71, 80, 66, 99, 89, 77, 70, 90, 90, 97, 100, 64, 94, 82, 81, 84, 71, 66, 80, 95, 62, 100, 75, 82, 63, 82, 74, 84, 87, 66, 99, 95, 84, 75, 97, 79, 94, 92, 65, 93, 87, 88, 60, 84, 69, 61, 79, 67, 66, 68, 75, 60, 86, 91, 75, 96, 88, 74, 77, 100, 95, 77, 66, 82, 87, 91, 68, 89, 61, 77, 84, 88, 64, 94, 81, 76, 98, 60, 92, 88, 60, 80, 78, 68, 75, 61, 70, 67, 78, 100, 76, 64, 82, 99, 66, 100, 69, 60, 67, 67, 70, 68, 98, 80, 62, 95, 83, 79, 93, 82, 84, 90, 87, 68, 84, 76, 64, 75, 88, 74, 99, 72, 81, 76, 66, 75, 69, 85, 77, 89, 65, 66, 89, 71, 71, 98, 100, 62, 88, 77, 82, 70, 76, 86, 68, 84, 80, 73, 87, 69, 68, 99, 76, 88, 64, 63, 93, 83, 81, 69, 87, 90, 83, 79, 86, 83, 97, 69, 69, 73, 79, 77, 82, 77, 91, 90, 70, 76, 78, 74, 76, 88, 65, 76, 69, 72, 98, 73, 80, 60, 77, 71, 92, 60, 85, 79, 82, 78, 92, 89, 62, 86, 84, 95, 64, 82, 91, 86, 82, 84, 75, 87, 60, 64, 75, 69, 71, 77, 77, 92, 62, 62, 82, 76, 76, 84, 81, 74, 80, 89, 82, 88, 85, 75, 86, 71, 68, 97, 63, 86, 98, 81, 68, 85, 82, 72, 61, 100, 82, 78, 72, 75, 82, 85, 78, 92, 60, 90, 85, 85, 67, 71, 75, 78, 97, 77, 74, 84, 63, 71, 87, 61, 89, 96, 80, 82, 61, 74, 69, 64, 96, 79, 82, 84, 69, 73, 75, 94, 66, 77, 100, 73, 99, 77, 75, 62, 87, 66, 68, 64, 71, 87, 70, 94, 87, 87, 99, 78, 92, 77, 92, 96, 93, 83, 72, 77, 92, 68, 66, 89, 90, 77, 87, 75, 94, 64, 63, 75, 60, 76, 89, 75, 93, 83, 69, 66, 99, 60, 82, 82, 95, 71, 68, 91, 75, 63, 62, 76, 99, 93, 66, 64, 99, 82, 87, 87, 68, 71, 96, 64, 64, 85, 97, 90, 77, 64, 83, 80, 86, 68, 86, 98, 90, 74, 64, 79, 81, 67, 73, 100, 82, 88, 89, 87, 66, 77, 62, 80, 84, 99, 63, 91, 83, 87, 94, 91, 65, 77, 99, 97, 81, 70, 62, 98, 60, 74, 67, 83, 94, 88, 87, 97, 77, 95, 72, 91, 89, 93, 91, 75, 93, 65, 85, 96, 61, 80, 79, 62, 94, 96, 85, 95, 62, 80, 85, 61, 74, 80, 73, 95, 89, 75, 73, 84, 81, 76, 93, 89, 79, 96, 82, 94, 91, 98, 70, 79, 65, 86, 88, 61, 69, 86, 67, 65, 81, 91, 87, 76, 65, 89, 66, 98, 61, 79, 73, 100, 70, 91, 96]
		int i = 0, j = 0, buffer = 0;
		double start = System.nanoTime();
		
		for(i = 0; i < stockPrices.length; i++){
			for(j = 1; j < (stockPrices.length-i); j++){
				if(stockPrices[j-1] > stockPrices[j]){
					buffer = stockPrices[j-1];
					stockPrices[j-1] = stockPrices[j];
					stockPrices[j] = buffer;
				}
			}
		}
		double finish = System.nanoTime();
		render "waktu eksekusi program: "+(finish-start)
		
		render "<br /><br />["
		stockPrices.each{
				render it+", "
		}
		render "]"
	}
	
	def insertionSort = {
		int[] stockPrices = [70, 74, 90, 91, 66, 95, 76, 100, 71, 62, 83, 87, 86, 67, 69, 90, 80, 69, 92, 100, 85, 60, 63, 96, 84, 88, 96, 62, 78, 60, 100, 89, 85, 66, 98, 66, 80, 66, 83, 75, 63, 85, 76, 99, 95, 71, 95, 72, 92, 72, 84, 91, 91, 98, 97, 63, 95, 81, 78, 66, 80, 83, 91, 94, 87, 86, 83, 74, 95, 88, 69, 92, 100, 95, 93, 74, 93, 99, 86, 98, 96, 96, 73, 78, 71, 64, 86, 74, 81, 89, 96, 72, 94, 91, 84, 100, 100, 67, 78, 60, 60, 62, 87, 65, 62, 68, 100, 97, 78, 63, 97, 61, 77, 79, 78, 97, 66, 74, 67, 68, 83, 61, 95, 89, 90, 97, 70, 61, 62, 66, 87, 91, 70, 93, 87, 66, 69, 98, 78, 62, 86, 94, 85, 62, 97, 67, 66, 76, 69, 61, 84, 98, 69, 67, 89, 97, 99, 87, 74, 98, 66, 78, 86, 73, 82, 96, 76, 67, 61, 94, 67, 80, 64, 99, 97, 84, 69, 91, 95, 65, 86, 75, 76, 60, 73, 86, 64, 88, 94, 66, 83, 97, 60, 91, 95, 93, 86, 68, 98, 92, 96, 99, 95, 86, 78, 92, 100, 95, 100, 73, 66, 66, 74, 85, 96, 92, 85, 98, 87, 73, 62, 78, 70, 85, 72, 73, 97, 83, 65, 63, 64, 77, 84, 63, 73, 76, 73, 67, 94, 66, 89, 96, 75, 74, 99, 86, 100, 96, 92, 86, 100, 72, 81, 82, 73, 96, 90, 68, 76, 76, 81, 87, 62, 62, 72, 76, 71, 84, 87, 89, 76, 94, 67, 64, 76, 69, 62, 68, 69, 69, 68, 65, 75, 63, 81, 100, 86, 73, 69, 69, 91, 91, 98, 78, 96, 70, 78, 67, 83, 98, 90, 66, 69, 67, 85, 83, 96, 72, 95, 71, 88, 88, 74, 80, 94, 79, 95, 94, 80, 96, 73, 77, 64, 65, 99, 90, 80, 80, 91, 80, 65, 93, 70, 81, 79, 81, 89, 68, 80, 91, 86, 78, 76, 88, 99, 84, 92, 77, 95, 81, 99, 93, 81, 87, 64, 88, 90, 76, 60, 92, 99, 66, 94, 85, 88, 98, 62, 89, 87, 77, 72, 70, 77, 74, 82, 98, 77, 61, 95, 92, 88, 72, 98, 84, 65, 96, 60, 91, 94, 84, 100, 70, 72, 61, 68, 97, 97, 73, 99, 80, 90, 75, 60, 97, 89, 74, 81, 92, 84, 84, 89, 90, 100, 73, 87, 64, 92, 60, 83, 62, 66, 100, 75, 77, 60, 72, 82, 99, 83, 66, 97, 68, 86, 70, 73, 84, 77, 84, 81, 96, 95, 64, 92, 63, 86, 86, 79, 89, 99, 90, 80, 61, 63, 92, 70, 100, 73, 76, 100, 78, 69, 87, 95, 86, 92, 76, 64, 76, 82, 73, 87, 97, 97, 86, 65, 78, 77, 82, 80, 85, 93, 83, 61, 92, 87, 97, 62, 60, 69, 99, 62, 80, 74, 88, 62, 97, 60, 95, 61, 96, 72, 100, 85, 84, 64, 85, 60, 97, 98, 73, 94, 76, 90, 66, 95, 94, 71, 77, 64, 88, 85, 71, 80, 66, 99, 89, 77, 70, 90, 90, 97, 100, 64, 94, 82, 81, 84, 71, 66, 80, 95, 62, 100, 75, 82, 63, 82, 74, 84, 87, 66, 99, 95, 84, 75, 97, 79, 94, 92, 65, 93, 87, 88, 60, 84, 69, 61, 79, 67, 66, 68, 75, 60, 86, 91, 75, 96, 88, 74, 77, 100, 95, 77, 66, 82, 87, 91, 68, 89, 61, 77, 84, 88, 64, 94, 81, 76, 98, 60, 92, 88, 60, 80, 78, 68, 75, 61, 70, 67, 78, 100, 76, 64, 82, 99, 66, 100, 69, 60, 67, 67, 70, 68, 98, 80, 62, 95, 83, 79, 93, 82, 84, 90, 87, 68, 84, 76, 64, 75, 88, 74, 99, 72, 81, 76, 66, 75, 69, 85, 77, 89, 65, 66, 89, 71, 71, 98, 100, 62, 88, 77, 82, 70, 76, 86, 68, 84, 80, 73, 87, 69, 68, 99, 76, 88, 64, 63, 93, 83, 81, 69, 87, 90, 83, 79, 86, 83, 97, 69, 69, 73, 79, 77, 82, 77, 91, 90, 70, 76, 78, 74, 76, 88, 65, 76, 69, 72, 98, 73, 80, 60, 77, 71, 92, 60, 85, 79, 82, 78, 92, 89, 62, 86, 84, 95, 64, 82, 91, 86, 82, 84, 75, 87, 60, 64, 75, 69, 71, 77, 77, 92, 62, 62, 82, 76, 76, 84, 81, 74, 80, 89, 82, 88, 85, 75, 86, 71, 68, 97, 63, 86, 98, 81, 68, 85, 82, 72, 61, 100, 82, 78, 72, 75, 82, 85, 78, 92, 60, 90, 85, 85, 67, 71, 75, 78, 97, 77, 74, 84, 63, 71, 87, 61, 89, 96, 80, 82, 61, 74, 69, 64, 96, 79, 82, 84, 69, 73, 75, 94, 66, 77, 100, 73, 99, 77, 75, 62, 87, 66, 68, 64, 71, 87, 70, 94, 87, 87, 99, 78, 92, 77, 92, 96, 93, 83, 72, 77, 92, 68, 66, 89, 90, 77, 87, 75, 94, 64, 63, 75, 60, 76, 89, 75, 93, 83, 69, 66, 99, 60, 82, 82, 95, 71, 68, 91, 75, 63, 62, 76, 99, 93, 66, 64, 99, 82, 87, 87, 68, 71, 96, 64, 64, 85, 97, 90, 77, 64, 83, 80, 86, 68, 86, 98, 90, 74, 64, 79, 81, 67, 73, 100, 82, 88, 89, 87, 66, 77, 62, 80, 84, 99, 63, 91, 83, 87, 94, 91, 65, 77, 99, 97, 81, 70, 62, 98, 60, 74, 67, 83, 94, 88, 87, 97, 77, 95, 72, 91, 89, 93, 91, 75, 93, 65, 85, 96, 61, 80, 79, 62, 94, 96, 85, 95, 62, 80, 85, 61, 74, 80, 73, 95, 89, 75, 73, 84, 81, 76, 93, 89, 79, 96, 82, 94, 91, 98, 70, 79, 65, 86, 88, 61, 69, 86, 67, 65, 81, 91, 87, 76, 65, 89, 66, 98, 61, 79, 73, 100, 70, 91, 96]
		
		int i, j, buffer;
		double start = System.nanoTime();
		
		for(i = 0; i < stockPrices.length - 1; i++){
			for(j = i+1; j > 0; j--){
				if(stockPrices[j] < stockPrices[j-1]){
					buffer = stockPrices[j];
					stockPrices[j] = stockPrices[j-1];
					stockPrices[j-1] = buffer;
				}
			}
		}
		
		double finish = System.nanoTime();
		render "waktu eksekusi program: "+(finish-start)
		
		render "<br /><br />["
		stockPrices.each{
				render it+", "
		}
		render "]"
	}
	
	def quickSort = {
		int[] stockPrices = [70, 74, 90, 91, 66, 95, 76, 100, 71, 62, 83, 87, 86, 67, 69, 90, 80, 69, 92, 100, 85, 60, 63, 96, 84, 88, 96, 62, 78, 60, 100, 89, 85, 66, 98, 66, 80, 66, 83, 75, 63, 85, 76, 99, 95, 71, 95, 72, 92, 72, 84, 91, 91, 98, 97, 63, 95, 81, 78, 66, 80, 83, 91, 94, 87, 86, 83, 74, 95, 88, 69, 92, 100, 95, 93, 74, 93, 99, 86, 98, 96, 96, 73, 78, 71, 64, 86, 74, 81, 89, 96, 72, 94, 91, 84, 100, 100, 67, 78, 60, 60, 62, 87, 65, 62, 68, 100, 97, 78, 63, 97, 61, 77, 79, 78, 97, 66, 74, 67, 68, 83, 61, 95, 89, 90, 97, 70, 61, 62, 66, 87, 91, 70, 93, 87, 66, 69, 98, 78, 62, 86, 94, 85, 62, 97, 67, 66, 76, 69, 61, 84, 98, 69, 67, 89, 97, 99, 87, 74, 98, 66, 78, 86, 73, 82, 96, 76, 67, 61, 94, 67, 80, 64, 99, 97, 84, 69, 91, 95, 65, 86, 75, 76, 60, 73, 86, 64, 88, 94, 66, 83, 97, 60, 91, 95, 93, 86, 68, 98, 92, 96, 99, 95, 86, 78, 92, 100, 95, 100, 73, 66, 66, 74, 85, 96, 92, 85, 98, 87, 73, 62, 78, 70, 85, 72, 73, 97, 83, 65, 63, 64, 77, 84, 63, 73, 76, 73, 67, 94, 66, 89, 96, 75, 74, 99, 86, 100, 96, 92, 86, 100, 72, 81, 82, 73, 96, 90, 68, 76, 76, 81, 87, 62, 62, 72, 76, 71, 84, 87, 89, 76, 94, 67, 64, 76, 69, 62, 68, 69, 69, 68, 65, 75, 63, 81, 100, 86, 73, 69, 69, 91, 91, 98, 78, 96, 70, 78, 67, 83, 98, 90, 66, 69, 67, 85, 83, 96, 72, 95, 71, 88, 88, 74, 80, 94, 79, 95, 94, 80, 96, 73, 77, 64, 65, 99, 90, 80, 80, 91, 80, 65, 93, 70, 81, 79, 81, 89, 68, 80, 91, 86, 78, 76, 88, 99, 84, 92, 77, 95, 81, 99, 93, 81, 87, 64, 88, 90, 76, 60, 92, 99, 66, 94, 85, 88, 98, 62, 89, 87, 77, 72, 70, 77, 74, 82, 98, 77, 61, 95, 92, 88, 72, 98, 84, 65, 96, 60, 91, 94, 84, 100, 70, 72, 61, 68, 97, 97, 73, 99, 80, 90, 75, 60, 97, 89, 74, 81, 92, 84, 84, 89, 90, 100, 73, 87, 64, 92, 60, 83, 62, 66, 100, 75, 77, 60, 72, 82, 99, 83, 66, 97, 68, 86, 70, 73, 84, 77, 84, 81, 96, 95, 64, 92, 63, 86, 86, 79, 89, 99, 90, 80, 61, 63, 92, 70, 100, 73, 76, 100, 78, 69, 87, 95, 86, 92, 76, 64, 76, 82, 73, 87, 97, 97, 86, 65, 78, 77, 82, 80, 85, 93, 83, 61, 92, 87, 97, 62, 60, 69, 99, 62, 80, 74, 88, 62, 97, 60, 95, 61, 96, 72, 100, 85, 84, 64, 85, 60, 97, 98, 73, 94, 76, 90, 66, 95, 94, 71, 77, 64, 88, 85, 71, 80, 66, 99, 89, 77, 70, 90, 90, 97, 100, 64, 94, 82, 81, 84, 71, 66, 80, 95, 62, 100, 75, 82, 63, 82, 74, 84, 87, 66, 99, 95, 84, 75, 97, 79, 94, 92, 65, 93, 87, 88, 60, 84, 69, 61, 79, 67, 66, 68, 75, 60, 86, 91, 75, 96, 88, 74, 77, 100, 95, 77, 66, 82, 87, 91, 68, 89, 61, 77, 84, 88, 64, 94, 81, 76, 98, 60, 92, 88, 60, 80, 78, 68, 75, 61, 70, 67, 78, 100, 76, 64, 82, 99, 66, 100, 69, 60, 67, 67, 70, 68, 98, 80, 62, 95, 83, 79, 93, 82, 84, 90, 87, 68, 84, 76, 64, 75, 88, 74, 99, 72, 81, 76, 66, 75, 69, 85, 77, 89, 65, 66, 89, 71, 71, 98, 100, 62, 88, 77, 82, 70, 76, 86, 68, 84, 80, 73, 87, 69, 68, 99, 76, 88, 64, 63, 93, 83, 81, 69, 87, 90, 83, 79, 86, 83, 97, 69, 69, 73, 79, 77, 82, 77, 91, 90, 70, 76, 78, 74, 76, 88, 65, 76, 69, 72, 98, 73, 80, 60, 77, 71, 92, 60, 85, 79, 82, 78, 92, 89, 62, 86, 84, 95, 64, 82, 91, 86, 82, 84, 75, 87, 60, 64, 75, 69, 71, 77, 77, 92, 62, 62, 82, 76, 76, 84, 81, 74, 80, 89, 82, 88, 85, 75, 86, 71, 68, 97, 63, 86, 98, 81, 68, 85, 82, 72, 61, 100, 82, 78, 72, 75, 82, 85, 78, 92, 60, 90, 85, 85, 67, 71, 75, 78, 97, 77, 74, 84, 63, 71, 87, 61, 89, 96, 80, 82, 61, 74, 69, 64, 96, 79, 82, 84, 69, 73, 75, 94, 66, 77, 100, 73, 99, 77, 75, 62, 87, 66, 68, 64, 71, 87, 70, 94, 87, 87, 99, 78, 92, 77, 92, 96, 93, 83, 72, 77, 92, 68, 66, 89, 90, 77, 87, 75, 94, 64, 63, 75, 60, 76, 89, 75, 93, 83, 69, 66, 99, 60, 82, 82, 95, 71, 68, 91, 75, 63, 62, 76, 99, 93, 66, 64, 99, 82, 87, 87, 68, 71, 96, 64, 64, 85, 97, 90, 77, 64, 83, 80, 86, 68, 86, 98, 90, 74, 64, 79, 81, 67, 73, 100, 82, 88, 89, 87, 66, 77, 62, 80, 84, 99, 63, 91, 83, 87, 94, 91, 65, 77, 99, 97, 81, 70, 62, 98, 60, 74, 67, 83, 94, 88, 87, 97, 77, 95, 72, 91, 89, 93, 91, 75, 93, 65, 85, 96, 61, 80, 79, 62, 94, 96, 85, 95, 62, 80, 85, 61, 74, 80, 73, 95, 89, 75, 73, 84, 81, 76, 93, 89, 79, 96, 82, 94, 91, 98, 70, 79, 65, 86, 88, 61, 69, 86, 67, 65, 81, 91, 87, 76, 65, 89, 66, 98, 61, 79, 73, 100, 70, 91, 96]
		
		double start = System.nanoTime();
		
		quickSortFunc(stockPrices, 0, stockPrices.length - 1);
		
		double finish = System.nanoTime();
		render "waktu eksekusi program: "+(finish-start)
		
		render "<br /><br />["
		stockPrices.each{
				render it+", "
		}
		render "]"
		
	}
	
	public void swap(int[] a, int i, int j) {
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
	
	int partition(int[] a, int p, int q) {
		int x = a[p];
		int i = p;
		for (int j = i + 1; j <= q; j++) {
			if (a[j] <= x) {
				i += 1;
				swap(a, i, j);
			}
		}
		swap(a, p, i);    
		return i;
	}
	
	def quickSortFunc(int[] a, int p, int q){
		int r = 0
		if(p < q){
			r = partition(a, p, q)
			quickSortFunc(a, p, r - 1)
			quickSortFunc(a, r + 1, q)
		}
	}

	def soalNoTiga = {
		render(view: "soalNoTiga")
	}
	
    def soalNoTigaFunc = {
		def arraySatu = [], arrayDua = [], arrayTiga = []
		int i = 0
		try{
			Map<String, String> cookies = Jsoup.connect("https://booking.airasia.com")
				.userAgent("Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36")
				.execute()
				.cookies()
			
			Connection.Response res = Jsoup.connect("https://booking.airasia.com/Flight/Select?o1="+params.fromInput+"&d1="+params.toInput+"&culture=id-ID&dd1="+params.departureDate+"&ADT=1&s=true&mon=true&cc=IDR&c=false")
				.userAgent("Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36")
				.cookies(cookies)
				.execute()
			
			Document doc = res.parse()
			
			Elements els = doc.select(".avail-table-bold")
			els.each{
				if((i % 2) == 0)  arraySatu << [ CGK : it.text()]
				else arraySatu << [ DPS : it.text()]
				i++
			}
			
			els = doc.select("div[style*=font-size:11.5px]")
			els.each{
				arrayDua << [ it.text() ]
			}
			
			els = doc.select(".avail-fare-price-wrapper")
			els.each{
				it.select("div.avail-fare-price").each{
					arrayTiga << [ it.text() ]
				}
			}
		} catch (Exception e){
			println e.getMessage()
		}
		//render(view:"soalNoTiga", model:[dataSatu : arraySatu, dataDua : arrayDua, dataTiga : arrayTiga])
		
		render(contentType: "application/json") {
			data(dataSatu : arraySatu, dataDua : arrayDua, dataTiga : arrayTiga)
		}
	}
}
